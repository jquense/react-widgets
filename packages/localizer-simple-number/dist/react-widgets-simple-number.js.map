{"version":3,"sources":["webpack:///react-widgets-simple-number.js","webpack:///webpack/bootstrap c33776e13444a04d372e","webpack:///C:/Users/marnusw/Development/react-widgets/node_modules/deconstruct-number-format/index.js","webpack:///./../../tools/shim.js","webpack:///./localizer.js","webpack:///external \"window.ReactWidgets\"","webpack:///C:/Users/marnusw/Development/react-widgets/node_modules/format-number-with-string/index.js","webpack:///C:/Users/marnusw/Development/react-widgets/node_modules/format-number/index.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","requiredFormat","format","trim","negativeType","negativeRightSymbol","negativeLeftSymbol","negativeRightPos","negativeLeftPos","prefix","suffix","test","indexOf","slice","search","length","lastIndexOf","absMask","decimalChar","decimalsPart","integerPart","decimalsSeparator","integerSeparator","replace","padLeft","maxLeft","padRight","maxRight","_interopRequireDefault","obj","default","simpleNumber","options","arguments","undefined","_defaults$options","_extends","defaults","decimal","grouping","localizer","formats","parse","value","culture","data","_deconstructNumberFormat2","negative","halves","split","integerSeperator","RegExp","pop","join","parseFloat","isNaN","_formatNumberWithString2","precision","_configure2","setNumberLocalizer","assign","target","source","key","_configure","_formatNumberWithString","_deconstructNumberFormat","window","ReactWidgets","deconstructNumberFormat","formatFactory","overrideOptions","deconstructedFormat","negativeLeftOut","negativeRightOut","round","truncate","formatter","number","output","charAt","noUnits","push","noSeparator","addDecimalSeparators","addIntegerSeparators","unformat","allowedSeparators","forEach","newNumber","negativeOut","separator","separate","x","rgx","padding","buf","substr","places","decim","leadingzeros","substring"],"mappings":"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","file":"react-widgets-simple-number.js","sourcesContent":["/*! (c) 2014 - present: Jason Quense | https://github.com/jquense/react-widgets/blob/master/LICENSE.md */\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\n\r\n\r\nexports = module.exports = function deconstructNumberFormat(requiredFormat) {\r\n\r\n\r\n  var format= requiredFormat || '-9,999.90';\r\n\r\n  format=format.trim(); //ignore leading and trailing spaces\r\n  \r\n  // *********************************************************************************\r\n  // find position and type of negative and contents of prefix and suffix text\r\n  // *********************************************************************************\r\n  \r\n  var negativeType = '', negativeRightSymbol = '', negativeLeftSymbol = '',\r\n      negativeRightPos = -1, negativeLeftPos = -1, \r\n      absFormat,\r\n      prefix = '', suffix = '';\r\n  \r\n  // brackets as negative\r\n  if (/^([^()]+)?[(]([^09#]+)?[09#., ]+([^)]+)?[)](.+)?$/.test(format)) {\r\n    negativeType = 'brackets';\r\n    negativeLeftPos = format.indexOf(\"(\");\r\n    negativeLeftSymbol = '('\r\n    if (negativeLeftPos > 0) { //after prefix\r\n      prefix = format.slice(0, negativeLeftPos);\r\n    } else {\r\n      prefix = format.search(/0|9|#/) > 0 ? format.slice(1, format.search(/0|9|#/)) : \"\";\r\n    }\r\n    format = format.slice(prefix.length+1);\r\n\r\n    negativeRightPos = format.indexOf(\")\");\r\n    negativeRightSymbol = ')'\r\n    if (negativeRightPos < format.length-1) { //before prefix\r\n      suffix = format.slice(negativeRightPos+1);\r\n      format = format.slice(0, negativeRightPos);\r\n    } else {\r\n      suffix = format.search(/[^09#,.]([^09#](.+)?)?[)]$/) > -1  ? format.slice(format.search(/[^09#,.]([^09#](.+)?)?[)]$/), -1) : \"\";\r\n      format = format.slice(0, format.length - suffix.length - 1);\r\n      negativeRightPos = 0;\r\n    }\r\n\r\n  } else if (format.indexOf(\"-\") === -1){\r\n    //positive values only\r\n    negativeType = 'none';\r\n    prefix = format.search(/[.,]?[09#]/) > 0 ? format.slice(0, format.search(/[.,]?[09#]/)) : \"\";\r\n    format = format.slice(prefix.length);\r\n    suffix = format.search(/[^09#,.]([^09#]+|$)/) > -1  ? format.slice(format.search(/[^09#,.]([^09#]+|$)/)) : \"\";\r\n    format = format.slice(0, format.length-suffix.length);\r\n\r\n  } else if (/^([^09#-]+)?-.+$/.test(format)) {\r\n    //negative symbol to left of number (before or after prefix)\r\n    negativeType = 'left';\r\n    negativeLeftPos = format.indexOf(\"-\");\r\n    negativeLeftSymbol = '-'\r\n    if (negativeLeftPos > 0) { //after prefix\r\n      prefix = format.slice(0, negativeLeftPos);\r\n    } else {\r\n      prefix = format.search(/[09#]/) > 0 ? format.slice(1, format.search(/[09#]/)) : \"\";\r\n    }\r\n    format = format.slice(prefix.length+1);\r\n    suffix = format.search(/[^09#,.]([^09#]+|$)/) > -1  ? format.slice(format.search(/[^09#,.]([^09#]+|$)/)) : \"\";\r\n    format = format.slice(0, format.length-suffix.length);\r\n\r\n  } else {\r\n    //negative symbol to right of number (before or after suffix)\r\n    prefix = format.search(/[09#]/) > 0 ? format.slice(0, format.search(/[09#]/)) : \"\";\r\n    format = format.slice(prefix.length);\r\n    negativeType = 'right';\r\n    negativeRightSymbol = '-'\r\n    negativeRightPos = format.lastIndexOf(\"-\");\r\n    if (negativeRightPos < format.length-1) { //before suffix\r\n      suffix = format.slice(negativeRightPos+1);\r\n      format = format.slice(0, negativeRightPos);\r\n    } else {\r\n      suffix = format.search(/[^09#,.]([^09#](.+)?)?-$/) > -1  ? format.slice(format.search(/[^09#,.]([^09#](.+)?)?-$/), format.length-1) : \"\";\r\n      format = format.slice(0, format.length - suffix.length - 1);\r\n      negativeRightPos = 0;\r\n    }\r\n  }\r\n\r\n  // *********************************************************************************\r\n  //include spaces with negative symbols\r\n  // *********************************************************************************\r\n\r\n  //When negative is before prefix move spaces from start of prefix to end of negative symbol\r\n  while (negativeLeftPos === 0 && prefix && prefix[0] === ' ') {\r\n    negativeLeftSymbol = negativeLeftSymbol + ' ';\r\n    prefix = prefix.slice(1);\r\n  }\r\n\r\n  //When negative follows suffix move spaces end of suffix to start of negative symbol\r\n  while (negativeRightPos === 0 && suffix && suffix[suffix.length-1] === ' ') {\r\n    negativeRightSymbol = ' ' + negativeRightSymbol;\r\n    suffix = suffix.slice(0, -1);\r\n  }\r\n\r\n  //When negative follows prefix move spaces from start of format to end of negative symbol\r\n  while (negativeLeftPos > 0 && format.length && format[0] === ' ') {\r\n    negativeLeftSymbol = negativeLeftSymbol + ' ';\r\n    format = format.slice(1);\r\n  }\r\n\r\n  //When negative before suffix move spaces from end of format to start of negative symbol\r\n  while (negativeRightPos > 0 && format.length && format[format.length-1] === ' ') {\r\n    negativeRightSymbol = ' ' + negativeRightSymbol;\r\n    format = format.slice(0, -1);\r\n  }\r\n\r\n  var absMask = format;\r\n\r\n  // *********************************************************************************\r\n  //find the decimal character and parts of absolute format\r\n  // *********************************************************************************\r\n\r\n  var decimalChar = '', decimalsPart = '', integerPart = '', decimalsSeparator = '', integerSeparator = '';\r\n\r\n  //if last char is a ',' and there are no other commas then use this as decimal point\r\n  if (format[format.length-1] === ',' && format.indexOf(',') === format.length-1) {\r\n    decimalChar = ',';\r\n  //otherwise use consider '.'\r\n  } else if (format.indexOf('.') > -1) {\r\n    if (format.indexOf('.') === format.lastIndexOf('.')) {\r\n      decimalChar = \".\";\r\n    } else {\r\n      // two of '.' means this must be the separator, so assume  ',' is the decimal\r\n      decimalChar = ',';\r\n    }\r\n  //otherwise use ',' if it exists and there is only one\r\n  } else if (format.indexOf(',') > -1) {\r\n    if (format.indexOf(',') === format.lastIndexOf(',')) {\r\n      decimalChar = ',';\r\n    } else {\r\n      decimalChar = '.';\r\n    }\r\n  }\r\n\r\n  if (decimalChar && format.indexOf(decimalChar)>-1) {\r\n    decimalsPart = format.slice(format.indexOf(decimalChar)+1);\r\n    integerPart = format.slice(0,format.indexOf(decimalChar));\r\n  } else {\r\n    integerPart = format;\r\n    decimalsPart = '';\r\n  }\r\n\r\n  while (decimalsPart.length && decimalsPart.search(/[., ]$/) > -1) {\r\n    decimalsPart = decimalsPart.slice(0, -1);\r\n  }\r\n\r\n  while (integerPart.length && integerPart[0].search(/[., ]/) > -1) {\r\n    integerPart = integerPart.slice(1);\r\n  }\r\n\r\n  //find the thousands/thousanths separators\r\n  if (integerPart && integerPart.search(/[., ]/) > 0) {\r\n    integerSeparator = integerPart[integerPart.search(/[., ]/)];\r\n    integerPart = integerPart.replace(/[., ]/g, \"\");\r\n  }\r\n\r\n  if (decimalsPart && decimalsPart.search(/[., ]/) > 0) {\r\n    decimalsSeparator = decimalsPart[decimalsPart.search(/[., ]/)];\r\n    decimalsPart = decimalsPart.replace(/[., ]/g, \"\");\r\n  }\r\n\r\n  if ((integerPart.length && !(/^[09#]+$/).test(integerPart)) || (decimalsPart.length && !(/^[09#]+$/).test(decimalsPart))) {return false};\r\n\r\n  // *********************************************************************************\r\n  //resolve length and padding\r\n  // *********************************************************************************\r\n\r\n  var padLeft, maxLeft, padRight, maxRight;\r\n  padLeft = integerPart.indexOf(\"0\") >= 0 ? integerPart.length - integerPart.indexOf(\"0\") : -1;\r\n  maxLeft = integerPart.length === 0 ||integerPart[0] === \"0\" || integerPart[0] === \"9\" ? integerPart.length : -1;\r\n  padRight = decimalsPart.indexOf(\"0\") >= 0 ? decimalsPart.lastIndexOf(\"0\")+1 : -1;\r\n  maxRight = decimalsPart.length === 0 || decimalsPart[decimalsPart.length-1] === \"0\" || decimalsPart[decimalsPart.length-1] === \"9\" ? decimalsPart.length : -1;\r\n\r\n  // *********************************************************************************\r\n  // output\r\n  // *********************************************************************************\r\n\r\n  var deconstructedFormat = {\r\n    negativeType: negativeType,\r\n    negativeLeftPos: negativeLeftPos,\r\n    negativeRightPos: negativeRightPos,\r\n    negativeLeftSymbol: negativeLeftSymbol,\r\n    negativeRightSymbol: negativeRightSymbol,\r\n    suffix: suffix,\r\n    prefix: prefix,\r\n    absMask: absMask,\r\n    decimalChar: decimalChar,\r\n    integerSeparator: integerSeparator,\r\n    decimalsSeparator: decimalsSeparator,\r\n    padLeft: padLeft,\r\n    maxLeft: maxLeft,\r\n    padRight: padRight,\r\n    maxRight: maxRight\r\n  }\r\n\r\n  return deconstructedFormat;\r\n};\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/*** IMPORTS FROM imports-loader ***/\nvar module = __webpack_require__(2);\n\n'use strict';\n\nif (typeof module === 'function') {\n  module();\n}\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports.default = simpleNumber;\n\nvar _configure = __webpack_require__(3);\n\nvar _configure2 = _interopRequireDefault(_configure);\n\nvar _formatNumberWithString = __webpack_require__(4);\n\nvar _formatNumberWithString2 = _interopRequireDefault(_formatNumberWithString);\n\nvar _deconstructNumberFormat = __webpack_require__(0);\n\nvar _deconstructNumberFormat2 = _interopRequireDefault(_deconstructNumberFormat);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar defaults = {\n  decimal: '.',\n  grouping: ','\n};\n\nfunction simpleNumber() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var _defaults$options = _extends({}, defaults, options),\n      decimal = _defaults$options.decimal,\n      grouping = _defaults$options.grouping;\n\n  var localizer = {\n    formats: {\n      default: '-#' + grouping + '##0' + decimal\n    },\n\n    // TODO major bump consistent ordering\n    parse: function parse(value, culture, format) {\n      if (format) {\n        var data = (0, _deconstructNumberFormat2.default)(format),\n            negative = data.negativeLeftSymbol && value.indexOf(data.negativeLeftSymbol) !== -1 || data.negativeRightSymbol && value.indexOf(data.negativeRightSymbol) !== -1;\n\n        value = value.replace(data.negativeLeftSymbol, '').replace(data.negativeRightSymbol, '').replace(data.prefix, '').replace(data.suffix, '');\n\n        var halves = value.split(data.decimalChar);\n\n        if (data.integerSeperator) halves[0] = halves[0].replace(new RegExp('\\\\' + data.integerSeperator, 'g'));\n\n        if (data.decimalsSeparator) halves[1] = halves[1].replace(new RegExp('\\\\' + data.decimalsSeparator, 'g'));\n\n        if (halves[1] === '') halves.pop();\n\n        value = halves.join('.');\n        value = +value;\n\n        if (negative) value = -1 * value;\n      } else value = parseFloat(value);\n\n      return isNaN(value) ? null : value;\n    },\n    format: function format(value, _format) {\n      return (0, _formatNumberWithString2.default)(value, _format);\n    },\n    decimalChar: function decimalChar(format) {\n      return format && (0, _deconstructNumberFormat2.default)(format).decimalsSeparator || decimal || '.';\n    },\n    precision: function precision(format) {\n      var data = (0, _deconstructNumberFormat2.default)(format);\n      return data.maxRight !== -1 ? data.maxRight : null;\n    }\n  };\n\n  _configure2.default.setNumberLocalizer(localizer);\n  return localizer;\n}\nmodule.exports = exports['default'];\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\nmodule.exports = window.ReactWidgets;\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\n\r\nvar deconstructNumberFormat = __webpack_require__(0);\r\nvar formatFactory = __webpack_require__(5);\r\n\r\nexports = module.exports = function formatNumberWithString(value, requiredFormat, overrideOptions) {\r\n\r\n  var deconstructedFormat = []\r\n\r\n  if (requiredFormat) deconstructedFormat = deconstructNumberFormat(requiredFormat.trim());\r\n  \r\n  value = (value === null ? '' : value);\r\n  value = value + ''; //make a string\r\n  value = value.length ? value.trim() : '';\r\n  \r\n  var options = [];\r\n  \r\n  var format = formatFactory({\r\n    negativeType: deconstructedFormat.negativeType,\r\n    negativeLeftSymbol: deconstructedFormat.negativeLeftSymbol,\r\n    negativeRightSymbol: deconstructedFormat.negativeRightSymbol,\r\n    negativeLeftOut: deconstructedFormat.negativeLeftPos === 0,\r\n    negativeRightOut: deconstructedFormat.negativeRightPos === 0,\r\n    prefix: deconstructedFormat.prefix,\r\n    suffix: deconstructedFormat.suffix,\r\n    integerSeparator: deconstructedFormat.integerSeparator,\r\n    decimalsSeparator: deconstructedFormat.decimalsSeparator,\r\n    decimal: deconstructedFormat.decimalChar,\r\n    padLeft: deconstructedFormat.padLeft,\r\n    padRight: deconstructedFormat.padRight,\r\n    round: deconstructedFormat.maxRight,\r\n    truncate: null\r\n  })\r\n\r\n  return format(value, overrideOptions);\r\n\r\n};\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports) {\n\n\nmodule.exports = formatter;\n\nfunction formatter(options) {\n  options = options || {};\n\n\n  // *********************************************************************************************\n  // Set defaults for negatives\n  // options.negative, options.negativeOut, options.separator retained for backward compatibility\n  // *********************************************************************************************\n\n  // type of negative; default left\n  options.negativeType = options.negativeType || (options.negative === 'R' ? 'right' : 'left')\n\n  // negative symbols '-' or '()'\n  if (typeof options.negativeLeftSymbol !== 'string') {\n    switch (options.negativeType) {\n      case 'left':\n        options.negativeLeftSymbol = '-';\n        break;\n      case 'brackets':\n        options.negativeLeftSymbol = '(';\n        break;\n      default:\n        options.negativeLeftSymbol = '';\n    }\n  }\n  if (typeof options.negativeRightSymbol !== 'string') {\n    switch (options.negativeType) {\n      case 'right':\n        options.negativeRightSymbol = '-';\n        break;\n      case 'brackets':\n        options.negativeRightSymbol = ')';\n        break;\n      default:\n        options.negativeRightSymbol = '';\n    }\n  }\n\n  // whether negative symbol should be inside/outside prefix and suffix\n\n  if (typeof options.negativeLeftOut !== \"boolean\") {\n    options.negativeLeftOut = (options.negativeOut === false ? false : true);\n  }\n  if (typeof options.negativeRightOut !== \"boolean\") {\n    options.negativeRightOut = (options.negativeOut === false ? false : true);\n  }\n\n  //prefix and suffix\n  options.prefix = options.prefix || '';\n  options.suffix = options.suffix || '';\n\n  //separators\n  if (typeof options.integerSeparator !== 'string') {\n    options.integerSeparator = (typeof options.separator === 'string' ? options.separator : ',');\n  }\n  options.decimalsSeparator = typeof options.decimalsSeparator === 'string' ? options.decimalsSeparator : '';\n  options.decimal = options.decimal || '.';\n\n  //padders\n  options.padLeft = options.padLeft || -1 //default no padding\n  options.padRight = options.padRight || -1 //default no padding\n\n  function format(number, overrideOptions) {\n    overrideOptions = overrideOptions || {};\n\n    if (number || number === 0) {\n      number = '' + number;//convert number to string if it isn't already\n    } else {\n      return '';\n    }\n\n    //identify a negative number and make it absolute\n    var output = [];\n    var negative = number.charAt(0) === '-';\n    number = number.replace(/^\\-/g, '');\n\n    //Prepare output with left hand negative and/or prefix\n    if (!options.negativeLeftOut && !overrideOptions.noUnits) {\n      output.push(options.prefix);\n    }\n    if (negative) {\n      output.push(options.negativeLeftSymbol);\n    }\n    if (options.negativeLeftOut && !overrideOptions.noUnits) {\n      output.push(options.prefix);\n    }\n\n    //Format core number\n    number = number.split('.');\n    if (options.round != null) round(number, options.round);\n    if (options.truncate != null) number[1] = truncate(number[1], options.truncate);\n    if (options.padLeft > 0) number[0] = padLeft(number[0], options.padLeft);\n    if (options.padRight > 0) number[1] = padRight(number[1], options.padRight);\n    if (!overrideOptions.noSeparator && number[1]) number[1] = addDecimalSeparators(number[1], options.decimalsSeparator);\n    if (!overrideOptions.noSeparator && number[0]) number[0] = addIntegerSeparators(number[0], options.integerSeparator);\n    output.push(number[0]);\n    if (number[1]) {\n      output.push(options.decimal);\n      output.push(number[1]);\n    }\n\n    //Prepare output with right hand negative and/or prefix\n    if (options.negativeRightOut && !overrideOptions.noUnits) {\n      output.push(options.suffix);\n    }\n    if (negative) {\n      output.push(options.negativeRightSymbol);\n    }\n    if (!options.negativeRightOut && !overrideOptions.noUnits) {\n      output.push(options.suffix);\n    }\n\n    //join output and return\n    return output.join('');\n  }\n\n  format.negative = options.negative;\n  format.negativeOut = options.negativeOut;\n  format.negativeType = options.negativeType;\n  format.negativeLeftOut = options.negativeLeftOut;\n  format.negativeLeftSymbol = options.negativeLeftSymbol;\n  format.negativeRightOut = options.negativeRightOut;\n  format.negativeRightSymbol = options.negativeRightSymbol;\n  format.prefix = options.prefix;\n  format.suffix = options.suffix;\n  format.separate = options.separate;\n  format.integerSeparator = options.integerSeparator;\n  format.decimalsSeparator = options.decimalsSeparator;\n  format.decimal = options.decimal;\n  format.padLeft = options.padLeft;\n  format.padRight = options.padRight;\n  format.truncate = options.truncate;\n  format.round = options.round;\n\n  function unformat(number, allowedSeparators) {\n    allowedSeparators = allowedSeparators || [];\n    if (options.allowedSeparators) {\n      options.allowedSeparators.forEach(function (s) { allowedSeparators.push (s); });\n    }\n    allowedSeparators.push(options.integerSeparator);\n    allowedSeparators.push(options.decimalsSeparator);\n    number = number.replace(options.prefix, '');\n    number = number.replace(options.suffix, '');\n    var newNumber = number;\n    do {\n      number = newNumber;\n      for (var i = 0; i < allowedSeparators.length; i++) {\n        newNumber = newNumber.replace(allowedSeparators[i], '');\n      }\n    } while (newNumber != number);\n    return number;\n  }\n  format.unformat = unformat;\n\n  function validate(number, allowedSeparators) {\n    number = unformat(number, allowedSeparators);\n    number = number.split(options.decimal);\n    if (number.length > 2) {\n      return false;\n    } else if (options.truncate != null && number[1] && number[1].length > options.truncate) {\n      return false;\n    }  else if (options.round != null && number[1] && number[1].length > options.round) {\n      return false;\n    } else {\n      return /^-?\\d+\\.?\\d*$/.test(number);\n    }\n  }\n  return format;\n}\n\n//where x is already the integer part of the number\nfunction addIntegerSeparators(x, separator) {\n  x += '';\n  if (!separator) return x;\n  var rgx = /(\\d+)(\\d{3})/;\n  while (rgx.test(x)) {\n    x = x.replace(rgx, '$1' + separator + '$2');\n  }\n  return x;\n}\n\n//where x is already the decimal part of the number\nfunction addDecimalSeparators(x, separator) {\n  x += '';\n  if (!separator) return x;\n  var rgx = /(\\d{3})(\\d+)/;\n  while (rgx.test(x)) {\n    x = x.replace(rgx, '$1' + separator + '$2');\n  }\n  return x;\n}\n\n//where x is the integer part of the number\nfunction padLeft(x, padding) {\n  x = x + '';\n  var buf = [];\n  while (buf.length + x.length < padding) {\n    buf.push('0');\n  }\n  return buf.join('') + x;\n}\n\n//where x is the decimals part of the number\nfunction padRight(x, padding) {\n  if (x) {\n    x += '';\n  } else {\n    x = '';\n  }\n  var buf = [];\n  while (buf.length + x.length < padding) {\n    buf.push('0');\n  }\n  return x + buf.join('');\n}\nfunction truncate(x, length) {\n  if (x) {\n    x += '';\n  }\n  if (x && x.length > length) {\n    return x.substr(0, length);\n  } else {\n    return x;\n  }\n}\n\n//where number is an array with 0th item as integer string and 1st item as decimal string (no negatives)\nfunction round(number, places) {\n  if (number[1] && places >= 0 && number[1].length > places) {\n    //truncate to correct number of decimal places\n    var decim = number[1].slice(0, places);\n    //if next digit was >= 5 we need to round up\n    if (+(number[1].substr(places, 1)) >= 5) {\n      //But first count leading zeros as converting to a number will loose them\n      var leadingzeros = \"\";\n      while (decim.charAt(0)===\"0\") {\n        leadingzeros = leadingzeros + \"0\";\n        decim = decim.substr(1);\n      }\n      //Then we can change decim to a number and add 1 before replacing leading zeros\n      decim = (+decim + 1) + '';\n      decim = leadingzeros + decim;\n      if (decim.length > places) {\n        //adding one has made it longer\n        number[0] = (+number[0]+ +decim.charAt(0)) + ''; //add value of firstchar to the integer part\n        decim = decim.substring(1);   //ignore the 1st char at the beginning which is the carry to the integer part\n      }\n    }\n    number[1] = decim;\n  }\n  return number;\n}\n\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// react-widgets-simple-number.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap c33776e13444a04d372e","'use strict';\r\n\r\n\r\nexports = module.exports = function deconstructNumberFormat(requiredFormat) {\r\n\r\n\r\n  var format= requiredFormat || '-9,999.90';\r\n\r\n  format=format.trim(); //ignore leading and trailing spaces\r\n  \r\n  // *********************************************************************************\r\n  // find position and type of negative and contents of prefix and suffix text\r\n  // *********************************************************************************\r\n  \r\n  var negativeType = '', negativeRightSymbol = '', negativeLeftSymbol = '',\r\n      negativeRightPos = -1, negativeLeftPos = -1, \r\n      absFormat,\r\n      prefix = '', suffix = '';\r\n  \r\n  // brackets as negative\r\n  if (/^([^()]+)?[(]([^09#]+)?[09#., ]+([^)]+)?[)](.+)?$/.test(format)) {\r\n    negativeType = 'brackets';\r\n    negativeLeftPos = format.indexOf(\"(\");\r\n    negativeLeftSymbol = '('\r\n    if (negativeLeftPos > 0) { //after prefix\r\n      prefix = format.slice(0, negativeLeftPos);\r\n    } else {\r\n      prefix = format.search(/0|9|#/) > 0 ? format.slice(1, format.search(/0|9|#/)) : \"\";\r\n    }\r\n    format = format.slice(prefix.length+1);\r\n\r\n    negativeRightPos = format.indexOf(\")\");\r\n    negativeRightSymbol = ')'\r\n    if (negativeRightPos < format.length-1) { //before prefix\r\n      suffix = format.slice(negativeRightPos+1);\r\n      format = format.slice(0, negativeRightPos);\r\n    } else {\r\n      suffix = format.search(/[^09#,.]([^09#](.+)?)?[)]$/) > -1  ? format.slice(format.search(/[^09#,.]([^09#](.+)?)?[)]$/), -1) : \"\";\r\n      format = format.slice(0, format.length - suffix.length - 1);\r\n      negativeRightPos = 0;\r\n    }\r\n\r\n  } else if (format.indexOf(\"-\") === -1){\r\n    //positive values only\r\n    negativeType = 'none';\r\n    prefix = format.search(/[.,]?[09#]/) > 0 ? format.slice(0, format.search(/[.,]?[09#]/)) : \"\";\r\n    format = format.slice(prefix.length);\r\n    suffix = format.search(/[^09#,.]([^09#]+|$)/) > -1  ? format.slice(format.search(/[^09#,.]([^09#]+|$)/)) : \"\";\r\n    format = format.slice(0, format.length-suffix.length);\r\n\r\n  } else if (/^([^09#-]+)?-.+$/.test(format)) {\r\n    //negative symbol to left of number (before or after prefix)\r\n    negativeType = 'left';\r\n    negativeLeftPos = format.indexOf(\"-\");\r\n    negativeLeftSymbol = '-'\r\n    if (negativeLeftPos > 0) { //after prefix\r\n      prefix = format.slice(0, negativeLeftPos);\r\n    } else {\r\n      prefix = format.search(/[09#]/) > 0 ? format.slice(1, format.search(/[09#]/)) : \"\";\r\n    }\r\n    format = format.slice(prefix.length+1);\r\n    suffix = format.search(/[^09#,.]([^09#]+|$)/) > -1  ? format.slice(format.search(/[^09#,.]([^09#]+|$)/)) : \"\";\r\n    format = format.slice(0, format.length-suffix.length);\r\n\r\n  } else {\r\n    //negative symbol to right of number (before or after suffix)\r\n    prefix = format.search(/[09#]/) > 0 ? format.slice(0, format.search(/[09#]/)) : \"\";\r\n    format = format.slice(prefix.length);\r\n    negativeType = 'right';\r\n    negativeRightSymbol = '-'\r\n    negativeRightPos = format.lastIndexOf(\"-\");\r\n    if (negativeRightPos < format.length-1) { //before suffix\r\n      suffix = format.slice(negativeRightPos+1);\r\n      format = format.slice(0, negativeRightPos);\r\n    } else {\r\n      suffix = format.search(/[^09#,.]([^09#](.+)?)?-$/) > -1  ? format.slice(format.search(/[^09#,.]([^09#](.+)?)?-$/), format.length-1) : \"\";\r\n      format = format.slice(0, format.length - suffix.length - 1);\r\n      negativeRightPos = 0;\r\n    }\r\n  }\r\n\r\n  // *********************************************************************************\r\n  //include spaces with negative symbols\r\n  // *********************************************************************************\r\n\r\n  //When negative is before prefix move spaces from start of prefix to end of negative symbol\r\n  while (negativeLeftPos === 0 && prefix && prefix[0] === ' ') {\r\n    negativeLeftSymbol = negativeLeftSymbol + ' ';\r\n    prefix = prefix.slice(1);\r\n  }\r\n\r\n  //When negative follows suffix move spaces end of suffix to start of negative symbol\r\n  while (negativeRightPos === 0 && suffix && suffix[suffix.length-1] === ' ') {\r\n    negativeRightSymbol = ' ' + negativeRightSymbol;\r\n    suffix = suffix.slice(0, -1);\r\n  }\r\n\r\n  //When negative follows prefix move spaces from start of format to end of negative symbol\r\n  while (negativeLeftPos > 0 && format.length && format[0] === ' ') {\r\n    negativeLeftSymbol = negativeLeftSymbol + ' ';\r\n    format = format.slice(1);\r\n  }\r\n\r\n  //When negative before suffix move spaces from end of format to start of negative symbol\r\n  while (negativeRightPos > 0 && format.length && format[format.length-1] === ' ') {\r\n    negativeRightSymbol = ' ' + negativeRightSymbol;\r\n    format = format.slice(0, -1);\r\n  }\r\n\r\n  var absMask = format;\r\n\r\n  // *********************************************************************************\r\n  //find the decimal character and parts of absolute format\r\n  // *********************************************************************************\r\n\r\n  var decimalChar = '', decimalsPart = '', integerPart = '', decimalsSeparator = '', integerSeparator = '';\r\n\r\n  //if last char is a ',' and there are no other commas then use this as decimal point\r\n  if (format[format.length-1] === ',' && format.indexOf(',') === format.length-1) {\r\n    decimalChar = ',';\r\n  //otherwise use consider '.'\r\n  } else if (format.indexOf('.') > -1) {\r\n    if (format.indexOf('.') === format.lastIndexOf('.')) {\r\n      decimalChar = \".\";\r\n    } else {\r\n      // two of '.' means this must be the separator, so assume  ',' is the decimal\r\n      decimalChar = ',';\r\n    }\r\n  //otherwise use ',' if it exists and there is only one\r\n  } else if (format.indexOf(',') > -1) {\r\n    if (format.indexOf(',') === format.lastIndexOf(',')) {\r\n      decimalChar = ',';\r\n    } else {\r\n      decimalChar = '.';\r\n    }\r\n  }\r\n\r\n  if (decimalChar && format.indexOf(decimalChar)>-1) {\r\n    decimalsPart = format.slice(format.indexOf(decimalChar)+1);\r\n    integerPart = format.slice(0,format.indexOf(decimalChar));\r\n  } else {\r\n    integerPart = format;\r\n    decimalsPart = '';\r\n  }\r\n\r\n  while (decimalsPart.length && decimalsPart.search(/[., ]$/) > -1) {\r\n    decimalsPart = decimalsPart.slice(0, -1);\r\n  }\r\n\r\n  while (integerPart.length && integerPart[0].search(/[., ]/) > -1) {\r\n    integerPart = integerPart.slice(1);\r\n  }\r\n\r\n  //find the thousands/thousanths separators\r\n  if (integerPart && integerPart.search(/[., ]/) > 0) {\r\n    integerSeparator = integerPart[integerPart.search(/[., ]/)];\r\n    integerPart = integerPart.replace(/[., ]/g, \"\");\r\n  }\r\n\r\n  if (decimalsPart && decimalsPart.search(/[., ]/) > 0) {\r\n    decimalsSeparator = decimalsPart[decimalsPart.search(/[., ]/)];\r\n    decimalsPart = decimalsPart.replace(/[., ]/g, \"\");\r\n  }\r\n\r\n  if ((integerPart.length && !(/^[09#]+$/).test(integerPart)) || (decimalsPart.length && !(/^[09#]+$/).test(decimalsPart))) {return false};\r\n\r\n  // *********************************************************************************\r\n  //resolve length and padding\r\n  // *********************************************************************************\r\n\r\n  var padLeft, maxLeft, padRight, maxRight;\r\n  padLeft = integerPart.indexOf(\"0\") >= 0 ? integerPart.length - integerPart.indexOf(\"0\") : -1;\r\n  maxLeft = integerPart.length === 0 ||integerPart[0] === \"0\" || integerPart[0] === \"9\" ? integerPart.length : -1;\r\n  padRight = decimalsPart.indexOf(\"0\") >= 0 ? decimalsPart.lastIndexOf(\"0\")+1 : -1;\r\n  maxRight = decimalsPart.length === 0 || decimalsPart[decimalsPart.length-1] === \"0\" || decimalsPart[decimalsPart.length-1] === \"9\" ? decimalsPart.length : -1;\r\n\r\n  // *********************************************************************************\r\n  // output\r\n  // *********************************************************************************\r\n\r\n  var deconstructedFormat = {\r\n    negativeType: negativeType,\r\n    negativeLeftPos: negativeLeftPos,\r\n    negativeRightPos: negativeRightPos,\r\n    negativeLeftSymbol: negativeLeftSymbol,\r\n    negativeRightSymbol: negativeRightSymbol,\r\n    suffix: suffix,\r\n    prefix: prefix,\r\n    absMask: absMask,\r\n    decimalChar: decimalChar,\r\n    integerSeparator: integerSeparator,\r\n    decimalsSeparator: decimalsSeparator,\r\n    padLeft: padLeft,\r\n    maxLeft: maxLeft,\r\n    padRight: padRight,\r\n    maxRight: maxRight\r\n  }\r\n\r\n  return deconstructedFormat;\r\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/marnusw/Development/react-widgets/node_modules/deconstruct-number-format/index.js\n// module id = 0\n// module chunks = 0","if (typeof module === 'function') {\n  module()\n}\n\n\n\n// WEBPACK FOOTER //\n// ./../../tools/shim.js","import configure from 'react-widgets/lib/configure';\nimport formatNumber from 'format-number-with-string';\nimport deconstruct from 'deconstruct-number-format';\n\nlet defaults = {\n  decimal: '.',\n  grouping: ','\n}\n\nexport default function simpleNumber(options = {}) {\n  let { decimal, grouping } = { ...defaults, ...options }\n\n  let localizer = {\n    formats: {\n      default: `-#${grouping}##0${decimal}`\n    },\n\n    // TODO major bump consistent ordering\n    parse(value, culture, format) {\n      if (format) {\n        let data = deconstruct(format)\n          , negative = (data.negativeLeftSymbol && value.indexOf(data.negativeLeftSymbol) !== -1)\n                    || (data.negativeRightSymbol && value.indexOf(data.negativeRightSymbol) !== -1)\n\n        value = value\n          .replace(data.negativeLeftSymbol, '')\n          .replace(data.negativeRightSymbol, '')\n          .replace(data.prefix, '')\n          .replace(data.suffix, '')\n\n        let halves = value.split(data.decimalChar)\n\n        if (data.integerSeperator)\n          halves[0] = halves[0].replace(new RegExp('\\\\' + data.integerSeperator, 'g'))\n\n        if (data.decimalsSeparator)\n          halves[1] = halves[1].replace(new RegExp('\\\\' + data.decimalsSeparator, 'g'))\n\n        if (halves[1] === '') halves.pop();\n\n        value = halves.join('.')\n        value = +value\n\n        if (negative)\n          value = -1 * value\n      }\n      else\n        value = parseFloat(value)\n\n      return isNaN(value) ? null : value\n    },\n\n    format(value, format) {\n      return formatNumber(value, format)\n    },\n\n    decimalChar(format) {\n      return (format && deconstruct(format).decimalsSeparator) || decimal || '.'\n    },\n\n    precision(format) {\n      let data = deconstruct(format)\n      return data.maxRight !== -1 ? data.maxRight : null\n    }\n  }\n\n  configure.setNumberLocalizer(localizer)\n  return localizer\n}\n\n\n\n// WEBPACK FOOTER //\n// ./localizer.js","module.exports = window.ReactWidgets;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"window.ReactWidgets\"\n// module id = 3\n// module chunks = 0","'use strict';\r\n\r\nvar deconstructNumberFormat = require('deconstruct-number-format');\r\nvar formatFactory = require('format-number');\r\n\r\nexports = module.exports = function formatNumberWithString(value, requiredFormat, overrideOptions) {\r\n\r\n  var deconstructedFormat = []\r\n\r\n  if (requiredFormat) deconstructedFormat = deconstructNumberFormat(requiredFormat.trim());\r\n  \r\n  value = (value === null ? '' : value);\r\n  value = value + ''; //make a string\r\n  value = value.length ? value.trim() : '';\r\n  \r\n  var options = [];\r\n  \r\n  var format = formatFactory({\r\n    negativeType: deconstructedFormat.negativeType,\r\n    negativeLeftSymbol: deconstructedFormat.negativeLeftSymbol,\r\n    negativeRightSymbol: deconstructedFormat.negativeRightSymbol,\r\n    negativeLeftOut: deconstructedFormat.negativeLeftPos === 0,\r\n    negativeRightOut: deconstructedFormat.negativeRightPos === 0,\r\n    prefix: deconstructedFormat.prefix,\r\n    suffix: deconstructedFormat.suffix,\r\n    integerSeparator: deconstructedFormat.integerSeparator,\r\n    decimalsSeparator: deconstructedFormat.decimalsSeparator,\r\n    decimal: deconstructedFormat.decimalChar,\r\n    padLeft: deconstructedFormat.padLeft,\r\n    padRight: deconstructedFormat.padRight,\r\n    round: deconstructedFormat.maxRight,\r\n    truncate: null\r\n  })\r\n\r\n  return format(value, overrideOptions);\r\n\r\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/marnusw/Development/react-widgets/node_modules/format-number-with-string/index.js\n// module id = 4\n// module chunks = 0","\nmodule.exports = formatter;\n\nfunction formatter(options) {\n  options = options || {};\n\n\n  // *********************************************************************************************\n  // Set defaults for negatives\n  // options.negative, options.negativeOut, options.separator retained for backward compatibility\n  // *********************************************************************************************\n\n  // type of negative; default left\n  options.negativeType = options.negativeType || (options.negative === 'R' ? 'right' : 'left')\n\n  // negative symbols '-' or '()'\n  if (typeof options.negativeLeftSymbol !== 'string') {\n    switch (options.negativeType) {\n      case 'left':\n        options.negativeLeftSymbol = '-';\n        break;\n      case 'brackets':\n        options.negativeLeftSymbol = '(';\n        break;\n      default:\n        options.negativeLeftSymbol = '';\n    }\n  }\n  if (typeof options.negativeRightSymbol !== 'string') {\n    switch (options.negativeType) {\n      case 'right':\n        options.negativeRightSymbol = '-';\n        break;\n      case 'brackets':\n        options.negativeRightSymbol = ')';\n        break;\n      default:\n        options.negativeRightSymbol = '';\n    }\n  }\n\n  // whether negative symbol should be inside/outside prefix and suffix\n\n  if (typeof options.negativeLeftOut !== \"boolean\") {\n    options.negativeLeftOut = (options.negativeOut === false ? false : true);\n  }\n  if (typeof options.negativeRightOut !== \"boolean\") {\n    options.negativeRightOut = (options.negativeOut === false ? false : true);\n  }\n\n  //prefix and suffix\n  options.prefix = options.prefix || '';\n  options.suffix = options.suffix || '';\n\n  //separators\n  if (typeof options.integerSeparator !== 'string') {\n    options.integerSeparator = (typeof options.separator === 'string' ? options.separator : ',');\n  }\n  options.decimalsSeparator = typeof options.decimalsSeparator === 'string' ? options.decimalsSeparator : '';\n  options.decimal = options.decimal || '.';\n\n  //padders\n  options.padLeft = options.padLeft || -1 //default no padding\n  options.padRight = options.padRight || -1 //default no padding\n\n  function format(number, overrideOptions) {\n    overrideOptions = overrideOptions || {};\n\n    if (number || number === 0) {\n      number = '' + number;//convert number to string if it isn't already\n    } else {\n      return '';\n    }\n\n    //identify a negative number and make it absolute\n    var output = [];\n    var negative = number.charAt(0) === '-';\n    number = number.replace(/^\\-/g, '');\n\n    //Prepare output with left hand negative and/or prefix\n    if (!options.negativeLeftOut && !overrideOptions.noUnits) {\n      output.push(options.prefix);\n    }\n    if (negative) {\n      output.push(options.negativeLeftSymbol);\n    }\n    if (options.negativeLeftOut && !overrideOptions.noUnits) {\n      output.push(options.prefix);\n    }\n\n    //Format core number\n    number = number.split('.');\n    if (options.round != null) round(number, options.round);\n    if (options.truncate != null) number[1] = truncate(number[1], options.truncate);\n    if (options.padLeft > 0) number[0] = padLeft(number[0], options.padLeft);\n    if (options.padRight > 0) number[1] = padRight(number[1], options.padRight);\n    if (!overrideOptions.noSeparator && number[1]) number[1] = addDecimalSeparators(number[1], options.decimalsSeparator);\n    if (!overrideOptions.noSeparator && number[0]) number[0] = addIntegerSeparators(number[0], options.integerSeparator);\n    output.push(number[0]);\n    if (number[1]) {\n      output.push(options.decimal);\n      output.push(number[1]);\n    }\n\n    //Prepare output with right hand negative and/or prefix\n    if (options.negativeRightOut && !overrideOptions.noUnits) {\n      output.push(options.suffix);\n    }\n    if (negative) {\n      output.push(options.negativeRightSymbol);\n    }\n    if (!options.negativeRightOut && !overrideOptions.noUnits) {\n      output.push(options.suffix);\n    }\n\n    //join output and return\n    return output.join('');\n  }\n\n  format.negative = options.negative;\n  format.negativeOut = options.negativeOut;\n  format.negativeType = options.negativeType;\n  format.negativeLeftOut = options.negativeLeftOut;\n  format.negativeLeftSymbol = options.negativeLeftSymbol;\n  format.negativeRightOut = options.negativeRightOut;\n  format.negativeRightSymbol = options.negativeRightSymbol;\n  format.prefix = options.prefix;\n  format.suffix = options.suffix;\n  format.separate = options.separate;\n  format.integerSeparator = options.integerSeparator;\n  format.decimalsSeparator = options.decimalsSeparator;\n  format.decimal = options.decimal;\n  format.padLeft = options.padLeft;\n  format.padRight = options.padRight;\n  format.truncate = options.truncate;\n  format.round = options.round;\n\n  function unformat(number, allowedSeparators) {\n    allowedSeparators = allowedSeparators || [];\n    if (options.allowedSeparators) {\n      options.allowedSeparators.forEach(function (s) { allowedSeparators.push (s); });\n    }\n    allowedSeparators.push(options.integerSeparator);\n    allowedSeparators.push(options.decimalsSeparator);\n    number = number.replace(options.prefix, '');\n    number = number.replace(options.suffix, '');\n    var newNumber = number;\n    do {\n      number = newNumber;\n      for (var i = 0; i < allowedSeparators.length; i++) {\n        newNumber = newNumber.replace(allowedSeparators[i], '');\n      }\n    } while (newNumber != number);\n    return number;\n  }\n  format.unformat = unformat;\n\n  function validate(number, allowedSeparators) {\n    number = unformat(number, allowedSeparators);\n    number = number.split(options.decimal);\n    if (number.length > 2) {\n      return false;\n    } else if (options.truncate != null && number[1] && number[1].length > options.truncate) {\n      return false;\n    }  else if (options.round != null && number[1] && number[1].length > options.round) {\n      return false;\n    } else {\n      return /^-?\\d+\\.?\\d*$/.test(number);\n    }\n  }\n  return format;\n}\n\n//where x is already the integer part of the number\nfunction addIntegerSeparators(x, separator) {\n  x += '';\n  if (!separator) return x;\n  var rgx = /(\\d+)(\\d{3})/;\n  while (rgx.test(x)) {\n    x = x.replace(rgx, '$1' + separator + '$2');\n  }\n  return x;\n}\n\n//where x is already the decimal part of the number\nfunction addDecimalSeparators(x, separator) {\n  x += '';\n  if (!separator) return x;\n  var rgx = /(\\d{3})(\\d+)/;\n  while (rgx.test(x)) {\n    x = x.replace(rgx, '$1' + separator + '$2');\n  }\n  return x;\n}\n\n//where x is the integer part of the number\nfunction padLeft(x, padding) {\n  x = x + '';\n  var buf = [];\n  while (buf.length + x.length < padding) {\n    buf.push('0');\n  }\n  return buf.join('') + x;\n}\n\n//where x is the decimals part of the number\nfunction padRight(x, padding) {\n  if (x) {\n    x += '';\n  } else {\n    x = '';\n  }\n  var buf = [];\n  while (buf.length + x.length < padding) {\n    buf.push('0');\n  }\n  return x + buf.join('');\n}\nfunction truncate(x, length) {\n  if (x) {\n    x += '';\n  }\n  if (x && x.length > length) {\n    return x.substr(0, length);\n  } else {\n    return x;\n  }\n}\n\n//where number is an array with 0th item as integer string and 1st item as decimal string (no negatives)\nfunction round(number, places) {\n  if (number[1] && places >= 0 && number[1].length > places) {\n    //truncate to correct number of decimal places\n    var decim = number[1].slice(0, places);\n    //if next digit was >= 5 we need to round up\n    if (+(number[1].substr(places, 1)) >= 5) {\n      //But first count leading zeros as converting to a number will loose them\n      var leadingzeros = \"\";\n      while (decim.charAt(0)===\"0\") {\n        leadingzeros = leadingzeros + \"0\";\n        decim = decim.substr(1);\n      }\n      //Then we can change decim to a number and add 1 before replacing leading zeros\n      decim = (+decim + 1) + '';\n      decim = leadingzeros + decim;\n      if (decim.length > places) {\n        //adding one has made it longer\n        number[0] = (+number[0]+ +decim.charAt(0)) + ''; //add value of firstchar to the integer part\n        decim = decim.substring(1);   //ignore the 1st char at the beginning which is the carry to the integer part\n      }\n    }\n    number[1] = decim;\n  }\n  return number;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/marnusw/Development/react-widgets/node_modules/format-number/index.js\n// module id = 5\n// module chunks = 0"],"sourceRoot":""}